#!/usr/bin/env node

'use strict';

const yargs = require('yargs'),
  chalk = require('chalk');

const ghuc = require('..');

const packageJson = require('../package.json');

// CLI options
const argv = yargs.usage('Usage: $0 [options]').
  describe('balance',
    'Auto-mine until this initial Hucer balance is achieved (default: 0)').
  describe('autoMine', 'Auto-mine indefinitely (overrides --balance option)').
  describe('ghucPath', 'Path to ghuc executable to use instead of default').
  describe('genesisBlock', 'Genesis block overrides as a JSON string').
  help('h').
  alias('h', 'help').
  boolean('v', 'Verbose logging').
  describe('version', 'Output version.').
  epilogue('All other options get passed onto the ghuc executable.').
  parse(process.argv.slice(1));

if (argv.version) {
  return console.log(`ghuc-private ${packageJson.version}`);
}

var ghucOptions = {};

var nonGhucOptionKeys = [
  '_',
  '$0',
  'v',
  'h',
  'help',
  'version',
  'ghucPath',
  'genesisBlock',
  'balance',
  'autoMine',
];

for (let key in argv) {
  if (0 > nonGhucOptionKeys.indexOf(key)) {
    ghucOptions[key] = argv[key];
  }
}

var inst = ghuc({
  verbose: !!argv.v,
  balance: argv.balance,
  autoMine: !!argv.autoMine,
  ghucPath: argv.ghucPath || null,
  genesisBlock: JSON.parse(argv.genesisBlock || 'null'),
  ghucOptions: ghucOptions,
});

inst.start().then(function() {
  console.log(chalk.yellow(`Ghuc is now running (pid: ${inst.pid}).\n`));
  console.log(chalk.yellow(`Data folder:\t${inst.dataDir}`));
  console.log(chalk.yellow(`Genesis file:\t${inst.genesisFile}`));
  console.log(chalk.yellow(`\nHucerbase:\t${inst.account}`));
  console.log(
    chalk.yellow(`\nIPC:\tghuc attach ipc://${inst.dataDir}/ghuc.ipc`));
}).catch(function(err) {
  console.error(err);
});
